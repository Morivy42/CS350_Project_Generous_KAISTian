generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  userid                         Int        @id @default(autoincrement())
  name                           String     @db.VarChar(20)
  nickname                       String     @db.VarChar(20)
  avatar                         Bytes?
  email                          String?    @unique @db.VarChar(20)
  contact                        Int?
  id                             String     @unique @db.VarChar(20)
  password                       String?
  notification                   String[]
  donation_info                  Int[]
  donated_items                  Int[]
  donating_items                 Int[]
  requested_items                Int[]
  waiting_campaign               Int[]
  campaigns                      Int[]
  campaign                       campaign[]
  campreq                        campreq[]
  item_item_confirmed_userToUser item[]     @relation("item_confirmed_userToUser")
  item_item_donatorToUser        item[]     @relation("item_donatorToUser")
  request                        request[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model item {
  itemid                         Int       @id @default(autoincrement())
  photo                          Bytes?
  name                           String?   @db.VarChar(20)
  quantity                       Int?
  category                       String    @db.VarChar(20)
  description                    String?
  donator                        Int
  requested_users                Int[]
  confirmed_user                 Int?
  rejected_users                 Int[]
  created_at                     DateTime? @db.Timestamp(6)
  User_item_confirmed_userToUser User?     @relation("item_confirmed_userToUser", fields: [confirmed_user], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  User_item_donatorToUser        User      @relation("item_donatorToUser", fields: [donator], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  request                        request[]
}

model request {
  requestid Int     @id @default(autoincrement())
  userid    Int?
  itemid    Int?
  quantity  Int?
  appeal    String?
  status     Int?    @default(0)
  item      item?   @relation(fields: [itemid], references: [itemid], onDelete: Cascade, onUpdate: NoAction, map: "fk_request_itemid")
  User      User?   @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "fk_request_userid")
}

model campaign {
  campaignid  Int       @id @default(autoincrement())
  name        String?   @db.VarChar(30)
  image       Bytes?
  category    String    @db.VarChar(20)
  description String?
  uploader    Int?
  waiting     Boolean?
  numpart     Int?
  User        User?     @relation(fields: [uploader], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  campreq     campreq[]
}

model campreq {
  requestid Int       @id @default(autoincrement())
  userid    Int?
  itemid    Int?
  appeal    String?
  campaign  campaign? @relation(fields: [itemid], references: [campaignid], onDelete: NoAction, onUpdate: NoAction)
  User      User?     @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model example_table {
  id             Int      @id @default(autoincrement())
  name           String?
  list_attribute String[]
}
